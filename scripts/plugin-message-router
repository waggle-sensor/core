#!/usr/bin/env python3
# ANL:waggle-license
# This file is part of the Waggle Platform.  Please see the file
# LICENSE.waggle.txt for the legal details of the copyright and software
# license.  For more details on the Waggle project, visit:
#          http://www.wa8.gl
# ANL:waggle-license
import argparse
import logging
import pika
import waggle.protocol

logger = logging.getLogger('plugin-router')

route_format = 'to-plugin-{plugin_id}-{plugin_major_version}.{plugin_minor_version}-{plugin_instance}'


def unpack_messages_and_datagrams(body):
    for message in waggle.protocol.unpack_waggle_packets(body):
        for datagram in waggle.protocol.unpack_datagrams(message['body']):
            yield message, datagram


def message_handler(ch, method, properties, body):
    logger.info('Got message data.')

    for message, datagram in unpack_messages_and_datagrams(body):
        route_queue = route_format.format(**datagram)

        plugin_message = message.copy()
        plugin_message['body'] = waggle.protocol.pack_datagrams([datagram])
        route_data = waggle.protocol.pack_waggle_packets([plugin_message])

        ch.queue_declare(queue=route_queue, durable=True)
        ch.basic_publish(exchange='', routing_key=route_queue, body=route_data)
        logger.info('Route to queue %s.', route_queue)

    ch.basic_ack(delivery_tag=method.delivery_tag)
    logger.info('Ack message data.')


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--url', default='amqp://localhost', help='AMQP broker URL to connect to.')
    parser.add_argument('queue', help='Message queue to process.')
    args = parser.parse_args()

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y/%m/%d %H:%M:%S %Z',
    )

    parameters = pika.URLParameters(args.url)
    connection = pika.BlockingConnection(parameters)
    channel = connection.channel()

    channel.queue_declare(queue=args.queue, durable=True)
    channel.basic_consume(message_handler, args.queue)
    channel.start_consuming()


if __name__ == '__main__':
    main()
