#!/usr/bin/env python3
# ANL:waggle-license
#  This file is part of the Waggle Platform.  Please see the file
#  LICENSE.waggle.txt for the legal details of the copyright and software
#  license.  For more details on the Waggle project, visit:
#           http://www.wa8.gl
# ANL:waggle-license
import argparse
import logging
import os
import pika
import re
import waggle.protocol.v0 as protocol

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y/%m/%d %H:%M:%S %Z',
    level=logging.INFO,
)


WAGGLE_NODE_ID = os.environ['WAGGLE_NODE_ID']
WAGGLE_SUB_ID = os.environ['WAGGLE_SUB_ID']


def parse_version_string(s):
    ver = tuple(map(int, s.split('.')))

    if len(ver) < 2:
        raise ValueError('Invalid version string.')

    return ver


def parse_plugin_user_id(user_id):
    match = re.match('plugin-([^-]+)-([^-]+)-([^-]+)', user_id)

    if match is None:
        raise ValueError('Invalid plugin user ID.')

    id_string, version_string, instance_string = match.groups()

    return {
        'id': int(id_string),
        'version': parse_version_string(version_string),
        'instance': int(instance_string),
    }


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--url', default='amqp://localhost', help='AMQP broker URL to connect to.')
    parser.add_argument('inqueue', help='Queue to consume from.')
    parser.add_argument('outqueue', help='Queue to publish to.')
    args = parser.parse_args()

    parameters = pika.URLParameters(args.url)
    connection = pika.BlockingConnection(parameters)
    channel = connection.channel()

    channel.queue_declare(queue=args.inqueue, durable=True)
    channel.queue_declare(queue=args.outqueue, durable=True)

    def message_handler(ch, method, properties, body):
        user_id = properties.user_id

        if user_id is None:
            ch.basic_ack(delivery_tag=method.delivery_tag)
            logging.info('Dropping message with missing user ID.')
            return

        try:
            plugin_info = parse_plugin_user_id(user_id)
        except ValueError:
            ch.basic_ack(delivery_tag=method.delivery_tag)
            logging.info('Dropping message with missing user ID.')
            return

        packets = protocol.unpack_waggle_packets(body)

        for packet in packets:
            # needs to reflect actual device
            packet['sender_id'] = WAGGLE_NODE_ID
            packet['sender_sub_id'] = WAGGLE_SUB_ID

            datagrams = protocol.unpack_datagrams(packet['body'])

            for datagram in datagrams:
                datagram['plugin_id'] = plugin_info['id']
                datagram['plugin_major_version'] = plugin_info['version'][0]
                datagram['plugin_minor_version'] = plugin_info['version'][1]
                datagram['plugin_instance'] = plugin_info['instance']

            packet['body'] = protocol.pack_datagrams(datagrams)

        data = protocol.pack_waggle_packets(packets)

        ch.basic_publish(
          exchange='',
          routing_key=args.outqueue,
          properties=pika.BasicProperties(
            delivery_mode=2),
          body=data)

        ch.basic_ack(delivery_tag=method.delivery_tag)
        logging.info('Validated message from %s.', user_id)

    channel.basic_consume(message_handler, args.inqueue)
    channel.start_consuming()


if __name__ == '__main__':
    main()
