#! /usr/bin/env python3
# ANL:waggle-license
# This file is part of the Waggle Platform.  Please see the file
# LICENSE.waggle.txt for the legal details of the copyright and software
# license.  For more details on the Waggle project, visit:
#          http://www.wa8.gl
# ANL:waggle-license

import argparse
import pika
import time
import re
import os
import json
import subprocess
import ssl

try:
    import waggle.platform
    from waggle.protocol.v5.encoder import encode_frame_from_flat_string
    IS_WAGGLE_PACKET_LOADED = True
except ImportError:
    IS_WAGGLE_PACKET_LOADED = False

'''
    Gathers information for system metrics
    and sends them as a json dump to beehive metric
    Can be modified when a new waggle protocol releases
'''
NAME = 'status'
VERSION = '0'

common = {
    'machine_id': None,
    'boot_id': None,
    'current_disk_type': None,
    'alternate_disk_type': None,
    'partition1': {
        'total': None,
        'used': None,
    },
    'partition2': {
        'total': None,
        'used': None,
    },
    'partition3': {
        'total': None,
        'used': None,
    },
    'ram': {
        'total': None,
        'free': None,
    },
    'cpu_temp': None,
    'lock_fs': None,
    'current_time': None,
    'uptime': None,
    'idletime': None,
    'load_1': None,
    'load_5': None,
    'load_10': None,
    'hbmode': None,
    'ipaddress': {
        'octet1': None,
        'octet2': None,
        'octet3': None,
        'octet4': None,
    },
}

nodecontroller = {
    'lock_pw': None,
    'ver': {
        'core': {
            'mj': None,
            'mi': None,
            'p': None,
        },
        'nodecontroller': {
            'mj': None,
            'mi': None,
            'p': None,
        },
        'plugin_manager': {
            'mj': None,
            'mi': None,
            'p': None,
        },
    },
    'devices': {
        'wagman': None,
        'metsense': None,
        'alphasense': None,
        'modem': None,
    },
    'beehive': {
        'ping': None,
        'sshd': None,
    },
    'rabbitmq': {
        'queues': {
            'data': None,
        },
        'exchanges': {
            'data': None,
        },
        'shovels': {
            'data': None,
            'images': None,
        },
    },
    'service': {
        'init': {
            'uptime': None,
            'exitcode': None,
            'state': None,
            'substate': None,
        },
        'epoch': {
            'uptime': None,
            'exitcode': None,
            'state': None,
            'substate': None,
        },
        'heartbeat': {
            'uptime': None,
            'exitcode': None,
            'state': None,
            'substate': None,
        },
        'reversetunnel': {
            'uptime': None,
            'exitcode': None,
            'state': None,
            'substate': None,
        },
        'wagmandriver': {
            'uptime': None,
            'exitcode': None,
            'state': None,
            'substate': None,
        },
        'wwan': {
            'uptime': None,
            'exitcode': None,
            'state': None,
            'substate': None,
        },
        'rabbitmq': {
            'uptime': None,
            'exitcode': None,
            'state': None,
            'substate': None,
        },
    },
    'local_sshd': None,
}

edgeprocessor = {
    'lock_pw': None,
    'ver': {
        'core': {
            'mj': None,
            'mi': None,
            'p': None,
        },
        'edge_processor': {
            'mj': None,
            'mi': None,
            'p': None,
        },
        'plugin_manager': {
            'mj': None,
            'mi': None,
            'p': None,
        },
    },
    'devices': {
        'camera_top': None,
        'camera_bottom': None,
        'microphone': None,
    },
    'rabbitmq': {
        'queues': {
            'data': None,
            'images': None,
        },
        'exchanges': {
            'data': None,
            'image_pipeline': None,
        },
    },
    'service': {
        'init': {
            'uptime': None,
            'exitcode': None,
            'state': None,
            'substate': None,
        },
        'heartbeat': {
            'uptime': None,
            'exitcode': None,
            'state': None,
            'substate': None,
        },
        'rabbitmq': {
            'uptime': None,
            'exitcode': None,
            'state': None,
            'substate': None,
        },
    },
}

wagman = {
    'ver': {
        'hw': {
            'mj': None,
            'mi': None,
        },
        'sw': {
            'mj': None,
            'mi': None,
            'p': None,
        },
        'git': None,
    },
    'time': {
        'compile': None,
        'current': None
    },
    'boot_flag': None,
    'uptime': None,
    'bootloader_nc_flag': None,
    'boot_count': None,
    'current': {
        'wagman': None,
        'nc': None,
        'ep': None,
        'cs': None,
        'port4': None,
        'port5': None,
    },
    'temperature': {
        'ncheatsink': None,
        'epheatsink': None,
        'battery': None,
        'brainplate': None,
        'powersupply': None,
    },
    'htu21d': {
        'temperature': None,
        'humidity': None,
    },
    'hih4030_humidity': None,
    'light': None,
    'failcount': {
        'nc': None,
        'ep': None,
        'cs': None,
        'port4': None,
        'port5': None,
    },
    'enabled': {
        'nc': None,
        'ep': None,
        'cs': None,
        'port4': None,
        'port5': None,
    },
    'mediaselect': {
        'nc': None,
        'ep': None,
    },
    'heartbeat': {
        'nc': None,
        'ep': None,
        'cs': None,
        'port4': None,
        'port5': None,
    },
    'lastboot': {
        'nc': None,
        'ep': None,
        'cs': None,
        'port4': None,
        'port5': None,
    },
    'powerfault': {
        'nc': None,
        'ep': None,
        'cs': None,
        'port4': None,
        'port5': None,
    },
    'bootattempt': {
        'nc': None,
        'ep': None,
        'cs': None,
        'port4': None,
        'port5': None,
    },
    'rtc': None,
}

network = {
    'broadband': {
        'rx': None,
        'tx': None,
    },
    'lan': {
        'rx': None,
        'tx': None,
    },
    'usb': {
        'rx': None,
        'tx': None,
    },
}


def call(command):
    assert isinstance(command, str)
    cmd = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    output = cmd.communicate()[0].decode().strip()
    return cmd.returncode, output


def read_file(filename):
    with open(filename) as f:
        return f.read()


def get_node_id():
    rc, out = call("ip link | grep -e '00:1e:06' | awk '{print $2}' | sed 's/://g' | tr '[:lower:]' '[:upper:]'")
    if rc == 0:
        return out
    else:
        return None


def print_plaintext(report, prefix='', delimiter='_', no_print_for_none=False):
    for key, value in sorted(report.items()):
        if isinstance(value, dict):
            yield from print_plaintext(value, prefix + key + delimiter, no_print_for_none=no_print_for_none)
        else:
            if no_print_for_none:
                if value is not None:
                    yield '{}{} {}'.format(prefix, key, str(value))
            else:
                yield '{}{} {}'.format(prefix, key, str(value))


def encode(dict_data):
    if IS_WAGGLE_PACKET_LOADED is False:
        print('Waggle packet encoder is not loaded...')
        return None

    try:
        flat_data = print_plaintext(dict_data, no_print_for_none=True)
        flat_string_data = '\n'.join(flat_data)
        return encode_frame_from_flat_string(flat_string_data)
    except Exception as ex:
        print('Error while encoding: %s' % (str(ex),))
        return None


def gather_data_nc():
    values = nodecontroller.copy()

    # Waggle password lock
    rc, out = call("shasum /etc/shadow | cut -d ' ' -f 1")
    if rc == 0:
        if out == "725f8d5ed683bef53bd9b1826ecfff44391d86dd":
            values['lock_pw'] = 'Y'
        elif out == "f76f01a49c45f26e32924246217b8eb6df0741fe":
            values['lock_pw'] = 'N'
        else:
            values['lock_pw'] = 'Q'

    # Beehive ping
    rc, out = call("curl beehive/api/ > /dev/null 2>&1")
    if rc == 0:
        values['beehive']['ping'] = 'Y'
    else:
        values['beehive']['ping'] = 'N'

    # Beehive sshd
    rc, out = call('ssh -i /etc/waggle/key.pem -x -o "PasswordAuthentication no" -o "StrictHostKeyChecking no" root@beehive -p 20022 date > /dev/null 2>&1')
    if rc == 0:
        values['beehive']['sshd'] = 'Y'
    else:
        values['beehive']['sshd'] = 'N'

    # Devices
    devices = [
        ('wagman', '/dev/waggle_sysmon'),
        ('metsense', '/dev/waggle_coresense'),
        ('alphasense', '/dev/alphasense'),
        ('modem', '/dev/attwwan'),
    ]
    for device, path in devices:
        if os.path.exists(path):
            values['devices'][device] = 'Y'
        else:
            values['devices'][device] = 'N'

    # Git versions
    repos = [
        'core',
        'nodecontroller',
        'plugin_manager'
    ]
    for repo in repos:
        rc, out = call("cd /usr/lib/waggle/%s; git describe --tag | sed 's/v//g'" % (repo,))
        if rc == 0:
            sp = out.strip().split('-')[0].split('.', 2)
            if len(sp) == 3:
                values['ver'][repo]['mj'] = sp[0]
                values['ver'][repo]['mi'] = sp[1]
                values['ver'][repo]['p'] = sp[2]

    # Waggle system services and their alias
    services = [
        ('waggle-init.service', 'init'),
        ('waggle-epoch.service', 'epoch'),
        ('waggle-heartbeat.service', 'heartbeat'),
        ('waggle-reverse-tunnel.service', 'reversetunnel'),
        ('waggle-wagman-driver.service', 'wagmandriver'),
        ('waggle-wwan.service', 'wwan'),
        ('rabbitmq-server.service', 'rabbitmq'),
    ]
    for service, alias in services:
        rc, out = call("systemctl show %s -p ExecMainCode -p ExecMainStartTimestamp -p ActiveState -p SubState" % service)
        if rc == 0:
            items = out.split('\n')
            for item in items:
                sp = item.strip().split('=')
                if len(sp) != 2:
                    continue
                if 'ExecMainCode' in item:
                    values['service'][alias]['exitcode'] = int(sp[1])
                elif 'ExecMainStartTimestamp' in item:
                    try:
                        epoch = int(time.mktime(time.strptime(sp[1], '%a %Y-%m-%d %H:%M:%S %Z')))
                        values['service'][alias]['uptime'] = epoch
                    except Exception:
                        values['service'][alias]['uptime'] = 0
                elif 'ActiveState' in item:
                    values['service'][alias]['state'] = sp[1][0]
                elif 'SubState' in item:
                    values['service'][alias]['substate'] = sp[1][0]

    # When RMQ is available
    rc, out = call('systemctl show rabbitmq-server.service -p ActiveState -p SubState')
    if rc == 0:
        if 'active' in out and 'running' in out:
            # RMQ queues
            _rc, _out = call('rabbitmqctl list_queues name | grep data')
            if _rc == 0:
                if 'data' in _out:
                    values['rabbitmq']['queues']['data'] = 'Y'
                else:
                    values['rabbitmq']['queues']['data'] = 'N'

            # RMQ exchanges
            _rc, _out = call('rabbitmqctl list_exchanges name | grep data')
            if _rc == 0:
                if 'data' in _out:
                    values['rabbitmq']['exchanges']['data'] = 'Y'
                else:
                    values['rabbitmq']['exchanges']['data'] = 'N'

            # RMQ shovels
            _rc, _out = call('rabbitmq-plugins list -E -e rabbitmq_shovel | grep rabbitmq_shovel | wc -l')
            if _rc == 0 and _out != '0':
                __rc, __out = call("rabbitmqctl eval 'rabbit_shovel_status:status().'")
                if __rc == 0:
                    shovels = [
                        'data',
                        'images',
                    ]

                    for shovel in shovels:
                        ret = re.search('%s.*running' % (shovel), __out, re.DOTALL)
                        if ret is not None:
                            values['rabbitmq']['shovels'][shovel] = 'Y'
                        else:
                            values['rabbitmq']['shovels'][shovel] = 'N'

    return values


def gather_data_ep():
    values = edgeprocessor.copy()

    # Waggle password lock
    rc, out = call("shasum /etc/shadow | cut -d ' ' -f 1")
    if rc == 0:
        out = out
        if out == "b0ac532c008523233768c56e5e247210f2495e47":
            values['lock_pw'] = 'Y'
        elif out == "8034856ebee2e336f1ddddc39618e9d59634421e":
            values['lock_pw'] = 'N'
        else:
            values['lock_pw'] = 'Q'

    # Git versions
    repos = [
        'core',
        'edge_processor',
        'plugin_manager',
    ]
    for repo in repos:
        rc, out = call("cd /usr/lib/waggle/%s; git describe --tag | sed 's/v//g'" % (repo,))
        if rc == 0:
            sp = out.strip().split('-')[0].split('.', 2)
            if len(sp) == 3:
                values['ver'][repo]['mj'] = sp[0]
                values['ver'][repo]['mi'] = sp[1]
                values['ver'][repo]['p'] = sp[2]

    # TODO: This needs to be updated!
    # values['ver']['plugin_manager']['mj'] = '0'
    # values['ver']['plugin_manager']['mi'] = '0'
    # values['ver']['plugin_manager']['p'] = '0'

    # Devices
    devices = [
        ('camera_bottom', '/dev/waggle_cam_bottom'),
        ('camera_top', '/dev/waggle_cam_top'),
        ('microphone', '/dev/waggle_microphone'),
    ]
    for device, path in devices:
        if os.path.exists(path):
            values['devices'][device] = 'Y'
        else:
            values['devices'][device] = 'N'

    # Waggle system services and their alias
    services = [
        ('waggle-init.service', 'init'),
        ('waggle-heartbeat.service', 'heartbeat'),
        ('rabbitmq-server.service', 'rabbitmq'),
    ]
    for service, alias in services:
        rc, out = call("systemctl show %s -p ExecMainCode -p ExecMainStartTimestamp -p ActiveState -p SubState" % service)
        if rc == 0:
            items = out.split('\n')
            for item in items:
                sp = item.strip().split('=')
                if len(sp) != 2:
                    continue
                if 'ExecMainCode' in item:
                    values['service'][alias]['exitcode'] = int(sp[1])
                elif 'ExecMainStartTimestamp' in item:
                    try:
                        epoch = int(time.mktime(time.strptime(sp[1], '%a %Y-%m-%d %H:%M:%S %Z')))
                        values['service'][alias]['uptime'] = epoch
                    except Exception:
                        values['service'][alias]['uptime'] = 0
                elif 'ActiveState' in item:
                    values['service'][alias]['state'] = sp[1][0]
                elif 'SubState' in item:
                    values['service'][alias]['substate'] = sp[1][0]

    # When RMQ is available
    rc, out = call('systemctl show rabbitmq-server.service -p ActiveState -p SubState')
    if rc == 0:
        if 'active' in out and 'running' in out:
            # RMQ queues
            _rc, _out = call('rabbitmqctl list_queues name | grep "data\|images"')
            if _rc == 0:
                if 'data' in _out:
                    values['rabbitmq']['queues']['data'] = 'Y'
                else:
                    values['rabbitmq']['queues']['data'] = 'N'
                if 'images' in _out:
                    values['rabbitmq']['queues']['images'] = 'Y'
                else:
                    values['rabbitmq']['queues']['images'] = 'N'

            # RMQ exchanges
            _rc, _out = call('rabbitmqctl list_exchanges name | grep "data\|image_pipeline"')
            if _rc == 0:
                if 'data' in _out:
                    values['rabbitmq']['exchanges']['data'] = 'Y'
                else:
                    values['rabbitmq']['exchanges']['data'] = 'N'
                if 'image_pipeline' in _out:
                    values['rabbitmq']['exchanges']['images'] = 'Y'
                else:
                    values['rabbitmq']['exchanges']['images'] = 'N'

    return values


def gather_data_wagman():
    values = wagman.copy()

    rc, out = call('wagman-client ver')
    if rc == 0:
        items = out.split('\n')
        for item in items:
            subject, args = item.split(' ', 1)
            if 'hw' in subject:
                sp = args.strip().split('.')
                if len(sp) == 2:
                    values['ver']['hw']['mj'] = sp[0]
                    values['ver']['hw']['mi'] = sp[1]
            elif 'ker' in subject:
                sp = args.strip().split('.')
                if len(sp) == 3:
                    values['ver']['sw']['mj'] = sp[0]
                    values['ver']['sw']['mi'] = sp[1]
                    values['ver']['sw']['p'] = sp[2]
            elif 'time' in subject:
                values['time']['compile'] = int(args)
            elif 'git' in subject:
                values['ver']['git'] = args

    # Boot flags
    # rc, out = call('wagman-client bf')
    # if rc == 0:
    #     values['boot_flag'] = out.split('\n')

    # Uptime
    rc, out = call('wagman-client up')
    if rc == 0:
        values['uptime'] = int(out)

    # Bootloader phase boot flag
    rc, out = call('wagman-client blf')
    if rc == 0:
        if 'off' in out:
            values['bootloader_nc_flag'] = 0
        else:
            values['bootloader_nc_flag'] = 1

    # Boots
    rc, out = call('wagman-client boots')
    if rc == 0:
        values['boot_count'] = int(out)

    # Get the last elements after splitting lines...
    rc, out = call("journalctl -u waggle-wagman-driver --since=-65s | rev | cut -d ':' -f 1 | rev | sort | uniq")
    if rc == 0:
        # Set all hb to N
        hb = values['heartbeat']
        for entity in hb:
            hb[entity] = 0
        values['heartbeat'] = hb

        items = out.split('\n')
        for item in items:
            try:
                subject, args = item.strip().split(' ', 1)
                if 'nc' in subject and 'heartbeat' in args:
                    values['heartbeat']['nc'] = 1
                elif 'gn' in subject and 'heartbeat' in args:
                    values['heartbeat']['ep'] = 1
                elif 'cs' in subject and 'heartbeat' in args:
                    values['heartbeat']['cs'] = 1
                elif 'cu' in subject:
                    sp = args.split(' ')
                    if len(sp) == 6:
                        values['current']['wagman'] = int(sp[0])
                        values['current']['nc'] = int(sp[1])
                        values['current']['ep'] = int(sp[2])
                        values['current']['cs'] = int(sp[3])
                        values['current']['port4'] = int(sp[4])
                        values['current']['port5'] = int(sp[5])
                elif 'th' in subject:
                    sp = args.split(' ')
                    if len(sp) == 5:
                        values['temperature']['ncheatsink'] = int(sp[0])
                        values['temperature']['epheatsink'] = int(sp[1])
                        values['temperature']['battery'] = int(sp[4])
                        values['temperature']['brainplate'] = int(sp[2])
                        values['temperature']['powersupply'] = int(sp[3])
                elif 'date' in subject:
                    struct_time = time.strptime(args, '%Y %m %d %H %M %S')
                    values['time']['current'] = int(time.mktime(struct_time))
                elif 'temperature' in subject:
                    fields = args.split()
                    values['htu21d']['temperature'] = int(float(fields[2]))
                elif 'humidity' in subject:
                    fields = args.split()
                    values['htu21d']['humidity'] = int(float(fields[2]))
                elif 'fails' in subject:
                    sp = args.split(' ')
                    if len(sp) == 5:
                        values['failcount']['nc'] = int(sp[0])
                        values['failcount']['ep'] = int(sp[1])
                        values['failcount']['cs'] = int(sp[2])
                        values['failcount']['port4'] = int(sp[3])
                        values['failcount']['port5'] = int(sp[4])
                elif 'enabled' in subject:
                    sp = args.split(' ')
                    if len(sp) == 5:
                        values['enabled']['nc'] = int(sp[0])
                        values['enabled']['ep'] = int(sp[1])
                        values['enabled']['cs'] = int(sp[2])
                        values['enabled']['port4'] = int(sp[3])
                        values['enabled']['port5'] = int(sp[4])
                elif 'media' in subject:
                    sp = args.split(' ')
                    if len(sp) == 2:
                        values['mediaselect']['nc'] = sp[0][0]
                        values['mediaselect']['ep'] = sp[1][0]
            except Exception:
                pass

    # Real time clock
    rc, out = call('wagman-client rtc')
    if rc == 0:
        values['rtc'] = int(out)

    return values


def gather_data_common():
    values = common.copy()

    # Node_id
    rc, out = call("hostnamectl | grep 'Machine ID' | tr -d ' ' | cut -d ':' -f 2")
    if rc == 0:
        values['machine_id'] = out

    # Boot_id
    rc, out = call("hostnamectl | grep 'Boot ID' | tr -d ' ' | cut -d ':' -f 2")
    if rc == 0:
        values['boot_id'] = out

    # CPU temperature
    rc, out = call("cat /sys/class/thermal/thermal_zone0/temp")
    if rc == 0:
        values['cpu_temp'] = out

    # RAM size
    rc, out = call("cat /proc/meminfo | grep Mem | tr -s ' '")
    if rc == 0:
        for part in out.split('\n'):
            sp = part.split(' ')
            if len(sp) == 3:
                if 'MemTotal' in sp[0]:
                    values['ram']['total'] = sp[1]
                elif 'MemFree' in sp[0]:
                    values['ram']['free'] = sp[1]

    # Disk devices
    rc, out = call('/usr/lib/waggle/core/scripts/detect_disk_devices.sh')
    current_disk_device = ''
    if rc == 0:
        for items in out.split('\n'):
            item, value = items.split('=', 1)
            if 'CURRENT_DISK_DEVICE_TYPE' == item:
                values['current_disk_type'] = value[0]
            elif 'OTHER_DISK_DEVICE_TYPE' == item:
                values['alternate_disk_type'] = value[0]
            elif 'CURRENT_DISK_DEVICE' == item:
                current_disk_device = value

    # Disk usage
    if current_disk_device != '':
        rc, out = call("df -m | grep %s | tr -s ' ' | cut -d ' ' -f1-3" % (current_disk_device,))
        if rc == 0:
            for part in out.split('\n'):
                sp = part.split(' ')
                if len(sp) == 3:
                    sp[0] = sp[0].replace(current_disk_device, '')
                    if '1' in sp[0]:
                        values['partition1']['total'] = sp[1]
                        values['partition1']['used'] = sp[2]
                    elif '2' in sp[0]:
                        values['partition2']['total'] = sp[1]
                        values['partition2']['used'] = sp[2]
                    elif '3' in sp[0]:
                        values['partition3']['total'] = sp[1]
                        values['partition3']['used'] = sp[2]

    # Time
    values['current_time'] = int(time.time())

    # Uptime / Idletime
    rc, out = call("cat /proc/uptime")
    if rc == 0:
        sp = out.split(' ')
        if len(sp) == 2:
            values['uptime'] = int(float(sp[0]))
            values['idletime'] = int(float(sp[1]))

    # Load average
    rc, out = call("cat /proc/loadavg | cut -d ' ' -f 1-3")
    if rc == 0:
        sp = out.split(' ')
        if len(sp) == 3:
            values['load_1'] = float(sp[0])
            values['load_5'] = float(sp[1])
            values['load_10'] = float(sp[2])

    # IP address
    rc, out = call("hostname -I")
    if rc == 0:
        for ip in out.split(' '):
            if "10.31.81." not in ip and ip != "127.0.0.1":
                sp = ip.strip().split('.')
                if len(sp) == 4:
                    values['ipaddress']['octet1'] = int(sp[0])
                    values['ipaddress']['octet2'] = int(sp[1])
                    values['ipaddress']['octet3'] = int(sp[2])
                    values['ipaddress']['octet4'] = int(sp[3])
                break

    # Heartbeat mode
    rc, out = call("cat /etc/waggle/hbmode")
    if rc == 0:
        values['hbmode'] = out[0]

    # Waggle filesystem lock
    if os.access('/', os.W_OK):
        values['lock_fs'] = 'N'
    else:
        values['lock_fs'] = 'Y'

    return values


def gather_data_net():
    values = network.copy()
    net_devices = [
        ('ppp0', 'broadband'),
        ('eth0', 'lan'),
        ('enx.', 'usb'),
    ]
    for pattern, alias in net_devices:
        try:
            devices_found = sorted([dev for dev in os.listdir('/sys/class/net') if re.match(pattern, dev)])
            first_found_device = devices_found[0]
            rx = int(read_file(os.path.join('/sys/class/net', first_found_device, 'statistics/rx_bytes')))
            tx = int(read_file(os.path.join('/sys/class/net', first_found_device, 'statistics/tx_bytes')))
            values[alias]['rx'] = rx
            values[alias]['tx'] = tx
        except Exception:
            pass
    return values


def report_to_beehive(dict_data):
    data = encode(dict_data)

    if not isinstance(data, bytes):
        print('Data is not bytes. Cannot send to Beehive')
        return

    app_id = ':'.join([NAME, VERSION])
    node_id = get_node_id()
    if node_id is None:
        print('No node_id is found. Cannot send to Beehive')
        return

    ssl_options = {
        'ca_certs': '/etc/waggle/cacert.pem',
        'certfile': '/etc/waggle/cert.pem',
        'keyfile': '/etc/waggle/key.pem',
        'cert_reqs': ssl.CERT_REQUIRED,
    }

    credentials = pika.PlainCredentials(
        username='node',
        password='waggle'
    )

    parameters = pika.ConnectionParameters(
        host='beehive',
        port=23181,
        credentials=credentials,
        ssl=True,
        ssl_options=ssl_options,
        connection_attempts=3,
        retry_delay=10,
        socket_timeout=20
    )
    try:
        connection = pika.BlockingConnection(parameters)
        channel = connection.channel()

        headers = {
            'node_id': node_id,
            'platform': waggle.platform.hardware()
        }

        properties = pika.BasicProperties(
            headers=headers,
            delivery_mode=2,
            timestamp=int(time.time() * 1000),
            content_type='b',
            type='',
            app_id=app_id,
            reply_to=node_id
        )

        channel.basic_publish(
            exchange='data-pipeline-in',
            routing_key='',
            properties=properties,
            body=data)

        channel.close()
    except Exception as ex:
        print('Could not send to Beehive: %s' % (str(ex),))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--beehive', action='store_true', help='Report the result to beehive')
    parser.add_argument('--hrf', action='store_true', help='Print the result in human readable form')
    parser.add_argument('--json', action='store_true', help='Print the result in a json')
    parser.add_argument('--silent', action='store_true', help='Do not print anything')
    parser.add_argument('-v', action='store_true', help='Verbose')
    args = parser.parse_args()

    platform = None
    rc, out = call('cat /proc/cpuinfo | grep Hardware | cut -d ":" -f 2 | tr -d " "')
    if rc == 0:
        platform = out
        if args.v:
            print('Platform is %s' % (platform,))
    else:
        print('No platform found')
        exit(1)

    time_start = time.time()

    report = {}
    if 'ODROIDC' in platform:
        result_common = gather_data_common()
        result_nc = gather_data_nc()

        # Information from ep
        result_ep = {}
        rc, out = call('/usr/lib/waggle/nodecontroller/scripts/eplogin date > /dev/null 2>&1')
        if rc == 0:
            result_nc['local_sshd'] = 'Y'

            _rc, _out = call('/usr/lib/waggle/nodecontroller/scripts/eplogin /usr/lib/waggle/core/scripts/status-service --json')
            if _rc == 0:
                try:
                    _out_json = json.loads(_out)
                    report['ep'] = _out_json['ep']
                except Exception:
                    pass
        else:
            result_nc['local_sshd'] = 'N'

        if os.path.exists('/dev/waggle_sysmon'):
            result_wagman = gather_data_wagman()
            report['wagman'] = result_wagman

        report['nc'] = result_common
        report['nc'].update(result_nc)

        report['net'] = gather_data_net()

    else:
        result_common = gather_data_common()
        result_ep = gather_data_ep()
        report['ep'] = result_common
        report['ep'].update(result_ep)

    if args.beehive:
        report_to_beehive(report)

    if args.silent:
        pass
    elif args.hrf:
        lines = print_plaintext(report)
        for line in lines:
            print(line)
    elif args.json:
        print(json.dumps(report))
    else:
        print(json.dumps(report))

    time_end = time.time()
    if args.v:
        print('%2f s elapsed' % (time_end - time_start,))
