#!/usr/bin/env python3
# ANL:waggle-license
#  This file is part of the Waggle Platform.  Please see the file
#  LICENSE.waggle.txt for the legal details of the copyright and software
#  license.  For more details on the Waggle project, visit:
#           http://www.wa8.gl
# ANL:waggle-license
import argparse
import configparser
import os
import ssl
# import subprocess


def heredoc(s):
    return s.strip('\n') + '\n'


service_template = heredoc('''
[Unit]
Description={description}

[Service]
WorkingDirectory={directory}
ExecStart={executable}
ExecStartPre=/usr/lib/waggle/core/bin/set-plugin-credentials
Restart=always
RestartSec=60
''')

service_filename = 'waggle-plugin-{id}-{version}-{instance}.service'

credentials_template = heredoc('''
[credentials]
username=plugin-{id}-{version}-{instance}
password={password}
''')


def read_file(filename):
    with open(filename) as file:
        return file.read()


def sanitize_version_string(s):
    return '.'.join(str(int(x)) for x in s.split('.', 2))


def get_plugin_config(plugin_dir):
    config = configparser.ConfigParser()
    config.read(os.path.join(plugin_dir, 'plugin.ver'))
    config.read(os.path.join(plugin_dir, 'plugin.instance'))
    section = config['plugin']

    return {
        'id': section.getint('id'),
        'name': section.get('name'),
        'description': section.get('description'),
        'reference': section.get('reference'),
        'version': sanitize_version_string(section.get('version')),
        'instance': section.getint('instance'),
    }

    # subprocess.check_output(['systemctl', 'daemon-reload'])
    # subprocess.check_output(['systemctl', 'restart', service_filename])


# def remove_service(plugin_config):
#     filename = service_filename.format(**plugin_config)
#
#     try:
#         subprocess.check_output(['systemctl', 'stop', os.path.basename(filename)])
#         os.remove(filename)
#     except OSError:
#         pass


def generate_random_password():
    return ssl.RAND_bytes(20).hex()


def enable_plugin(plugin_dir):
    plugin_config = get_plugin_config(plugin_dir)
    plugin_config['directory'] = os.path.abspath(plugin_dir)
    plugin_config['password'] = generate_random_password()
    plugin_config['executable'] = os.path.abspath(os.path.join(plugin_dir, 'plugin_bin/plugin_node'))

    # write service file
    template = service_template.format(**plugin_config)
    filename = service_filename.format(**plugin_config)

    targets = [
        os.path.join('/wagglerw/systemd/system', filename),
        os.path.join('/run/systemd/system', filename),
    ]

    for target in targets:
        os.makedirs(os.path.dirname(target), exist_ok=True)

        with open(target, 'w') as file:
            file.write(template)

        os.chmod(target, 0o700)

    # write credentials file
    template = credentials_template.format(**plugin_config)
    filename = os.path.join(plugin_dir, 'plugin.credentials')

    with open(filename, 'w') as file:
        file.write(template)

    print('enabled', plugin_dir)


# def disable_plugin(plugin_dir):
#     plugin_info = read_plugin_info(plugin_dir)
#     username = get_username_for_plugin_config(plugin_info)
#     remove_service(username)
#     print('disabled', username)


def main():
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers(dest='subcommand')

    parser_enable = subparsers.add_parser('start')
    parser_enable.add_argument('plugin_dirs', nargs='+')

    parser_disable = subparsers.add_parser('stop')
    parser_disable.add_argument('plugin_dirs', nargs='+')

    args = parser.parse_args()

    if args.subcommand == 'start':
        for plugin in args.plugin_dirs:
            enable_plugin(plugin)
    elif args.subcommand == 'stop':
        for plugin in args.plugin_dirs:
            disable_plugin(plugin)
    else:
        parser.print_help()


if __name__ == '__main__':
    main()
