#!/bin/bash
set -e

CONFIGURE_SYSTEM=0
while [[ $# -gt 0 ]]; do
  key="$1"
  echo "Key: $key"
  case $key in
    --system)
      CONFIGURE_SYSTEM=1
      ;;
      *)
      ;;
  esac
  shift
done

export current_dir="$(pwd)"

if [ $CONFIGURE_SYSTEM -eq 1 ]; then
  echo "configuring system..."
  ./scripts/configure-system.sh
  cd $current_dir
fi

if [ ! -e ${current_dir}/scripts/heartbeat.sh ] ; then
  print "heartbeat.sh not found"
  exit 1
fi

touch /tmp/alive

set -x
mkdir -p /var/log/waggle/

# cleanup original RabbitMQ service definition
systemctl disable rabbitmq-server.service
rm -f /etc/init.d/rabbitmq-server

# copy systemd scripts
rsync -a etc/systemd/ /etc/systemd
systemctl enable waggle-heartbeat.service
systemctl enable waggle-init.service
systemctl enable rabbitmq-server.service
systemctl set-default waggle-core.target

# setup .screen
ln -sf ${current_dir}/etc/dot_screen /home/waggle/.screen
ln -sf ${current_dir}/etc/dot_screen /root/.screen

# status-script
ln -sf ${current_dir}/scripts/status-service /usr/bin/waggle-status

# recover script and switch-mode script
ln -sf ${current_dir}/scripts/recover-other-media /usr/bin/waggle-recover-other-media
ln -sf ${current_dir}/scripts/switch-to-operation-mode /usr/bin/waggle-switch-to-operation-mode

set +x

echo "run: udevadm control --reload-rules"
echo "     udevadm trigger --subsystem-match=tty --action=add"
echo ""
echo "done"

# may want to move into a different script?
cp ${current_dir}/scripts/rabbitmqadmin /usr/bin

# Copy waggle-fs-lock and unlock scripts
cp ${current_dir}/scripts/waggle-fs-lock /usr/bin
cp ${current_dir}/scripts/waggle-fs-unlock /usr/bin

# install the particular version of pywaggle that we tested against
pywaggle_tag="v0.21.4"
pip install git+https://github.com/waggle-sensor/pywaggle@${pywaggle_tag}
pip3 install git+https://github.com/waggle-sensor/pywaggle@${pywaggle_tag}
